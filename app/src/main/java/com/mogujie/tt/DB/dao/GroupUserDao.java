package com.mogujie.tt.DB.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.mogujie.tt.DB.entity.GroupUserEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table GroupUser.
*/
public class GroupUserDao extends AbstractDao<GroupUserEntity, Long> {

    public static final String TABLENAME = "GroupUser";

    /**
     * Properties of entity GroupUserEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PeerId = new Property(1, long.class, "peerId", false, "PEER_ID");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property NickName = new Property(3, String.class, "nickName", false, "NICK_NAME");
        public final static Property UserIcon = new Property(4, String.class, "userIcon", false, "USER_ICON");
        public final static Property Signature = new Property(5, String.class, "signature", false, "SIGNATURE");
        public final static Property Intro = new Property(6, String.class, "intro", false, "INTRO");
        public final static Property Gender = new Property(7, String.class, "gender", false, "GENDER");
        public final static Property CreateTime = new Property(8, int.class, "createTime", false, "CREATE_TIME");
        public final static Property JoinTime = new Property(9, int.class, "joinTime", false, "JOIN_TIME");
        public final static Property Role = new Property(10, String.class, "role", false, "ROLE");
        public final static Property JoinType = new Property(11, String.class, "joinType", false, "JOIN_TYPE");
    };


    public GroupUserDao(DaoConfig config) {
        super(config);
    }
    
    public GroupUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GroupUser' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'PEER_ID' INTEGER NOT NULL UNIQUE ," + // 1: peerId
                "'USER_NAME' TEXT NOT NULL ," + // 2: userName
                "'NICK_NAME' TEXT NOT NULL ," + // 3: nickName
                "'USER_ICON' TEXT NOT NULL ," + // 4: userIcon
                "'SIGNATURE' TEXT NOT NULL ," + // 5: signature
                "'INTRO' TEXT NOT NULL ," + // 6: intro
                "'GENDER' TEXT NOT NULL ," + // 7: gender
                "'CREATE_TIME' INTEGER NOT NULL ," + // 8: createTime
                "'JOIN_TIME' INTEGER NOT NULL ," + // 9: joinTime
                "'ROLE' TEXT NOT NULL ," + // 10: role
                "'JOIN_TYPE' TEXT NOT NULL );"); // 11: joinType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GroupUser'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GroupUserEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getPeerId());
        stmt.bindString(3, entity.getUserName());
        stmt.bindString(4, entity.getNickName());
        stmt.bindString(5, entity.getUserIcon());
        stmt.bindString(6, entity.getSignature());
        stmt.bindString(7, entity.getIntro());
        stmt.bindString(8, entity.getGender());
        stmt.bindLong(9, entity.getCreateTime());
        stmt.bindLong(10, entity.getJoinTime());
        stmt.bindString(11, entity.getRole());
        stmt.bindString(12, entity.getJoinType());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GroupUserEntity readEntity(Cursor cursor, int offset) {
        GroupUserEntity entity = new GroupUserEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // peerId
            cursor.getString(offset + 2), // userName
            cursor.getString(offset + 3), // nickName
            cursor.getString(offset + 4), // userIcon
            cursor.getString(offset + 5), // signature
            cursor.getString(offset + 6), // intro
            cursor.getString(offset + 7), // gender
            cursor.getInt(offset + 8), // createTime
            cursor.getInt(offset + 9), // joinTime
            cursor.getString(offset + 10), // role
            cursor.getString(offset + 11) // joinType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GroupUserEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPeerId(cursor.getLong(offset + 1));
        entity.setUserName(cursor.getString(offset + 2));
        entity.setNickName(cursor.getString(offset + 3));
        entity.setUserIcon(cursor.getString(offset + 4));
        entity.setSignature(cursor.getString(offset + 5));
        entity.setIntro(cursor.getString(offset + 6));
        entity.setGender(cursor.getString(offset + 7));
        entity.setCreateTime(cursor.getInt(offset + 8));
        entity.setJoinTime(cursor.getInt(offset + 9));
        entity.setRole(cursor.getString(offset + 10));
        entity.setJoinType(cursor.getString(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GroupUserEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GroupUserEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
